class BaseComponent { constructor(type, config = {}) { this.type = type; this.config = config; this.id = config.id || `comp-${Math.random().toString(36).substr(2, 9)}`; this.element = null; this.isDisposed = false; this.eventHandlers = []} render() { throw new Error('Render method not implemented')} onMounted() { } onBeforeDispose() { } onDisposed() { } dispose() { if (this.isDisposed) { return} this.onBeforeDispose(); this.eventHandlers.forEach(handler => { if (handler.element && handler.event && handler.fn) { handler.element.off(handler.event, handler.fn)} }); this.eventHandlers = []; this.element = null; this.isDisposed = true; this.onDisposed()} addEventHandler(element, event, handler) { const $element = $(element); $element.on(event, handler); this.eventHandlers.push({ element: $element, event: event, fn: handler })} getElement() { return this.element} updateConfig(newConfig) { this.config = { ...this.config, ...newConfig }; if (this.element) { this.element.trigger('component:configUpdated', newConfig)} } } const EventBus = $({}); function publish(event, data) { EventBus.trigger(event, data)} function subscribe(event, handler) { EventBus.on(event, handler)} function createElement(tag, className, text) { const $el = $(`<${tag}>`); if (className) $el.addClass(className); if (text) $el.text(text); return $el} class ComponentManager { constructor() { this.activeComponents = new Map(); this.componentCounter = 0} renderComponent(component, container, options = {}) { if (!component || !container) { console.warn('ComponentManager: Invalid component or container'); return null} const componentId = `comp-${++this.componentCounter}`; const $container = $(container); let componentInstance; if (typeof component === 'function') { componentInstance = new component(options.config || {})} else if (component.render) { componentInstance = component} else { console.warn('ComponentManager: Invalid component type'); return null} const $rendered = componentInstance.render(); if (!$rendered || $rendered.length === 0) { console.warn('ComponentManager: Component render returned empty result'); return null} $rendered.attr('data-component-id', componentId); $rendered.attr('data-component-type', componentInstance.constructor.name); this.activeComponents.set(componentId, { instance: componentInstance, element: $rendered, container: $container, type: componentInstance.constructor.name, created: Date.now() }); $container.append($rendered); this.triggerComponentEvent(componentId, 'mounted', { component: componentInstance, element: $rendered }); return { id: componentId, element: $rendered, instance: componentInstance, dispose: () => this.disposeComponent(componentId) }} disposeComponent(componentId) { const componentData = this.activeComponents.get(componentId); if (!componentData) { console.warn(`ComponentManager: Component ${componentId} not found`); return false} const { instance, element, container } = componentData; this.triggerComponentEvent(componentId, 'beforeDispose', { component: instance, element: element }); if (instance.dispose && typeof instance.dispose === 'function') { try { instance.dispose()} catch (error) { console.error(`ComponentManager: Error disposing component ${componentId}:`, error)} } element.remove(); this.activeComponents.delete(componentId); this.triggerComponentEvent(componentId, 'disposed', { component: instance }); return true} disposeComponentsInContainer(container) { const $container = $(container); const componentsInContainer = $container.find('[data-component-id]'); let disposedCount = 0; componentsInContainer.each((index, element) => { const componentId = $(element).attr('data-component-id'); if (componentId && this.disposeComponent(componentId)) { disposedCount++} }); return disposedCount} disposeAllComponents() { const componentIds = Array.from(this.activeComponents.keys()); let disposedCount = 0; componentIds.forEach(id => { if (this.disposeComponent(id)) { disposedCount++} }); return disposedCount} getComponent(componentId) { return this.activeComponents.get(componentId)} getComponentsByType(type) { const components = []; this.activeComponents.forEach((data, id) => { if (data.type === type) { components.push({ id: id, ...data })} }); return components} getStats() { const stats = { total: this.activeComponents.size, byType: {}, memoryUsage: 0 }; this.activeComponents.forEach((data, id) => { stats.byType[data.type] = (stats.byType[data.type] || 0) + 1; stats.memoryUsage += this.estimateComponentMemory(data)}); return stats} estimateComponentMemory(componentData) { const element = componentData.element; const nodeCount = element.find('*').length + 1; return nodeCount * 100} triggerComponentEvent(componentId, eventName, data) { const event = $.Event(`component:${eventName}`, { componentId: componentId, ...data }); $(document).trigger(event)} cleanupOldComponents(maxAge = 300000) { const now = Date.now(); const oldComponents = []; this.activeComponents.forEach((data, id) => { if (now - data.created > maxAge) { oldComponents.push(id)} }); oldComponents.forEach(id => this.disposeComponent(id)); return oldComponents.length} } window.ComponentManager = new ComponentManager(); $.fn.renderComponent = function(component, options = {}) { return window.ComponentManager.renderComponent(component, this, options)}; $.fn.disposeComponents = function() { return window.ComponentManager.disposeComponentsInContainer(this)}; $(window).on('beforeunload', function() { window.ComponentManager.disposeAllComponents()}); class WebsiteBuilder { constructor(containerId) { this.container = $(`#${containerId}`); this.components = { navbar: NavbarComponent, hero: HeroComponent, section: SectionComponent, card: CardComponent, button: ButtonComponent, input: InputComponent, checkbox: CheckboxComponent, select: SelectComponent, layout: LayoutComponent }} buildFromJSON(config) { if (!config || !config.pages) { console.error('Invalid website configuration'); return} this.container.empty(); config.pages.forEach(page => { this.buildPage(page)})} buildPage(pageConfig) { const $page = $('<div>').addClass('page'); if (pageConfig.id) { $page.attr('id', pageConfig.id)} if (pageConfig.className) { $page.addClass(pageConfig.className)} if (pageConfig.layout) { const $layout = this.buildComponent({ type: 'layout', config: pageConfig.layout }); if ($layout) { $page.append($layout)} } else if (pageConfig.components && Array.isArray(pageConfig.components)) { pageConfig.components.forEach(componentConfig => { const $component = this.buildComponent(componentConfig); if ($component) { $page.append($component)} })} this.container.append($page)} buildComponent(config) { if (!config.type) { console.warn('Component config missing type:', config); return null} const ComponentClass = this.components[config.type]; if (!ComponentClass) { console.warn('Unknown component type:', config.type); return null} try { const component = new ComponentClass(config.config || {}); return component.render()} catch (error) { console.error('Error building component:', config.type, error); return null} } loadFromFile(jsonPath, callback) { $.getJSON(jsonPath) .done((data) => { this.buildFromJSON(data); if (callback) callback(null, data)}) .fail((error) => { console.error('Failed to load website JSON:', error); if (callback) callback(error, null)})} getCurrentConfig() { return { pages: [{ id: 'home', components: [] }] }} } class LayoutComponent extends BaseComponent { constructor(config = {}) { super('layout', config); this.layouts = { 'default': this.defaultLayout, 'landing': this.landingLayout, 'dashboard': this.dashboardLayout, 'blog': this.blogLayout, 'portfolio': this.portfolioLayout, 'minimal': this.minimalLayout, 'sidebar': this.sidebarLayout, 'grid': this.gridLayout }} render() { const layoutType = this.config.type || 'default'; const layoutFunction = this.layouts[layoutType]; if (!layoutFunction) { console.warn(`Unknown layout type: ${layoutType}`); return this.defaultLayout()} return layoutFunction()} defaultLayout() { const $layout = createElement('div', 'ui-layout default-layout'); if (this.config.header) { const $header = this.buildComponent('header', this.config.header); $layout.append($header)} const $main = createElement('main', 'layout-main'); if (this.config.content) { const $content = this.buildContent(this.config.content); $main.append($content)} $layout.append($main); if (this.config.footer) { const $footer = this.buildComponent('footer', this.config.footer); $layout.append($footer)} return $layout} landingLayout() { const $layout = createElement('div', 'ui-layout landing-layout'); if (this.config.navbar) { const $navbar = this.buildComponent('navbar', this.config.navbar); $layout.append($navbar)} if (this.config.hero) { const $hero = this.buildComponent('hero', this.config.hero); $layout.append($hero)} if (this.config.sections && Array.isArray(this.config.sections)) { this.config.sections.forEach(section => { const $section = this.buildComponent('section', section); $layout.append($section)})} if (this.config.footer) { const $footer = this.buildComponent('footer', this.config.footer); $layout.append($footer)} return $layout} dashboardLayout() { const $layout = createElement('div', 'ui-layout dashboard-layout'); if (this.config.sidebar) { const $sidebar = this.buildComponent('sidebar', this.config.sidebar); $layout.append($sidebar)} const $main = createElement('div', 'dashboard-main'); if (this.config.topbar) { const $topbar = this.buildComponent('topbar', this.config.topbar); $main.append($topbar)} if (this.config.content) { const $content = this.buildContent(this.config.content); $main.append($content)} $layout.append($main); return $layout} blogLayout() { const $layout = createElement('div', 'ui-layout blog-layout'); if (this.config.header) { const $header = this.buildComponent('header', this.config.header); $layout.append($header)} const $main = createElement('div', 'blog-main'); const $content = createElement('div', 'blog-content'); if (this.config.content) { const $contentElements = this.buildContent(this.config.content); $content.append($contentElements)} $main.append($content); if (this.config.sidebar) { const $sidebar = this.buildComponent('sidebar', this.config.sidebar); $main.append($sidebar)} $layout.append($main); if (this.config.footer) { const $footer = this.buildComponent('footer', this.config.footer); $layout.append($footer)} return $layout} portfolioLayout() { const $layout = createElement('div', 'ui-layout portfolio-layout'); if (this.config.navbar) { const $navbar = this.buildComponent('navbar', this.config.navbar); $layout.append($navbar)} if (this.config.hero) { const $hero = this.buildComponent('hero', this.config.hero); $layout.append($hero)} if (this.config.portfolio) { const $portfolio = this.buildComponent('portfolio', this.config.portfolio); $layout.append($portfolio)} if (this.config.footer) { const $footer = this.buildComponent('footer', this.config.footer); $layout.append($footer)} return $layout} minimalLayout() { const $layout = createElement('div', 'ui-layout minimal-layout'); if (this.config.header) { const $header = this.buildComponent('header', this.config.header); $layout.append($header)} const $main = createElement('main', 'minimal-main'); if (this.config.content) { const $content = this.buildContent(this.config.content); $main.append($content)} $layout.append($main); return $layout} sidebarLayout() { const $layout = createElement('div', 'ui-layout sidebar-layout'); if (this.config.sidebar) { const $sidebar = this.buildComponent('sidebar', this.config.sidebar); $layout.append($sidebar)} const $main = createElement('main', 'sidebar-main'); if (this.config.content) { const $content = this.buildContent(this.config.content); $main.append($content)} $layout.append($main); return $layout} gridLayout() { const $layout = createElement('div', 'ui-layout grid-layout'); if (this.config.header) { const $header = this.buildComponent('header', this.config.header); $layout.append($header)} const $grid = createElement('div', 'grid-container'); if (this.config.grid && Array.isArray(this.config.grid)) { this.config.grid.forEach(item => { const $gridItem = this.buildComponent(item.type, item.config); $grid.append($gridItem)})} $layout.append($grid); if (this.config.footer) { const $footer = this.buildComponent('footer', this.config.footer); $layout.append($footer)} return $layout} buildComponent(type, config) { const components = { navbar: NavbarComponent, hero: HeroComponent, section: SectionComponent, card: CardComponent, button: ButtonComponent, input: InputComponent, checkbox: CheckboxComponent, select: SelectComponent, header: this.buildHeader, footer: this.buildFooter, sidebar: this.buildSidebar, topbar: this.buildTopbar, portfolio: this.buildPortfolio }; const ComponentClass = components[type]; if (ComponentClass) { if (typeof ComponentClass === 'function' && ComponentClass.prototype && ComponentClass.prototype.render) { const component = new ComponentClass(config); return component.render()} else if (typeof ComponentClass === 'function') { return ComponentClass.call(this, config)} } console.warn(`Unknown component type: ${type}`); return createElement('div', 'unknown-component')} buildContent(content) { if (typeof content === 'string') { return $(content)} else if (Array.isArray(content)) { const $container = createElement('div', 'content-container'); content.forEach(item => { if (item.type && item.config) { const $component = this.buildComponent(item.type, item.config); $container.append($component)} }); return $container} return createElement('div', 'empty-content')} buildHeader(config) { const $header = createElement('header', 'layout-header'); if (config.title) { const $title = createElement('h1', 'header-title', config.title); $header.append($title)} if (config.subtitle) { const $subtitle = createElement('p', 'header-subtitle', config.subtitle); $header.append($subtitle)} return $header} buildFooter(config) { const $footer = createElement('footer', 'layout-footer'); if (config.text) { const $text = createElement('p', 'footer-text', config.text); $footer.append($text)} if (config.links && Array.isArray(config.links)) { const $links = createElement('div', 'footer-links'); config.links.forEach(link => { const $link = createElement('a', 'footer-link', link.text); $link.attr('href', link.href || '#'); $links.append($link)}); $footer.append($links)} return $footer} buildSidebar(config) { const $sidebar = createElement('aside', 'layout-sidebar'); if (config.title) { const $title = createElement('h3', 'sidebar-title', config.title); $sidebar.append($title)} if (config.items && Array.isArray(config.items)) { const $nav = createElement('nav', 'sidebar-nav'); config.items.forEach(item => { const $item = createElement('a', 'sidebar-item', item.text); $item.attr('href', item.href || '#'); if (item.active) $item.addClass('active'); $nav.append($item)}); $sidebar.append($nav)} return $sidebar} buildTopbar(config) { const $topbar = createElement('div', 'layout-topbar'); if (config.title) { const $title = createElement('h2', 'topbar-title', config.title); $topbar.append($title)} if (config.actions && Array.isArray(config.actions)) { const $actions = createElement('div', 'topbar-actions'); config.actions.forEach(action => { const $button = createElement('button', 'topbar-action', action.text); if (action.onClick) $button.on('click', action.onClick); $actions.append($button)}); $topbar.append($actions)} return $topbar} buildPortfolio(config) { const $portfolio = createElement('div', 'layout-portfolio'); if (config.title) { const $title = createElement('h2', 'portfolio-title', config.title); $portfolio.append($title)} if (config.items && Array.isArray(config.items)) { const $grid = createElement('div', 'portfolio-grid'); config.items.forEach(item => { const $item = createElement('div', 'portfolio-item'); if (item.image) { const $img = createElement('img', 'portfolio-image'); $img.attr('src', item.image); $img.attr('alt', item.title || 'Portfolio item'); $item.append($img)} if (item.title) { const $title = createElement('h3', 'portfolio-item-title', item.title); $item.append($title)} if (item.description) { const $desc = createElement('p', 'portfolio-item-desc', item.description); $item.append($desc)} $grid.append($item)}); $portfolio.append($grid)} return $portfolio} } class NavbarComponent extends BaseComponent { constructor(config = {}) { super('navbar', config)} render() { const $navbar = createElement('nav', 'ui-navbar'); if (this.config.brand) { const $brand = createElement('div', 'navbar-brand'); if (this.config.brand.logo) { const $logo = createElement('img', 'navbar-logo'); $logo.attr('src', this.config.brand.logo); $logo.attr('alt', this.config.brand.text || 'Logo'); $brand.append($logo)} if (this.config.brand.text) { const $brandText = createElement('span', 'navbar-brand-text', this.config.brand.text); $brand.append($brandText)} if (this.config.brand.href) { const $brandLink = createElement('a', 'navbar-brand-link'); $brandLink.attr('href', this.config.brand.href); $brandLink.append($brand); $navbar.append($brandLink)} else { $navbar.append($brand)} } if (this.config.items && Array.isArray(this.config.items)) { const $navItems = createElement('div', 'navbar-items'); this.config.items.forEach(item => { const $navItem = createElement('a', 'navbar-item'); $navItem.attr('href', item.href || '#'); $navItem.text(item.text || 'Link'); if (item.active) { $navItem.addClass('active')} if (item.onClick) { $navItem.on('click', (e) => { e.preventDefault(); item.onClick()})} $navItems.append($navItem)}); $navbar.append($navItems)} if (this.config.mobile) { const $mobileToggle = createElement('button', 'navbar-mobile-toggle'); $mobileToggle.html('☰'); $mobileToggle.on('click', () => { $navbar.toggleClass('mobile-open')}); $navbar.append($mobileToggle)} return $navbar} } class HeroComponent extends BaseComponent { constructor(config = {}) { super('hero', config)} render() { const $hero = createElement('section', 'ui-hero'); if (this.config.background) { $hero.css('background-image', `url(${this.config.background})`)} const $container = createElement('div', 'hero-container'); if (this.config.title) { const $title = createElement('h1', 'hero-title', this.config.title); $container.append($title)} if (this.config.subtitle) { const $subtitle = createElement('p', 'hero-subtitle', this.config.subtitle); $container.append($subtitle)} if (this.config.buttons && Array.isArray(this.config.buttons)) { const $buttonGroup = createElement('div', 'hero-buttons'); this.config.buttons.forEach(btn => { const $button = createElement('a', `hero-btn ${btn.variant || 'primary'}`); $button.attr('href', btn.href || '#'); $button.text(btn.text || 'Button'); if (btn.onClick) { $button.on('click', (e) => { e.preventDefault(); btn.onClick()})} $buttonGroup.append($button)}); $container.append($buttonGroup)} $hero.append($container); return $hero} } class SectionComponent extends BaseComponent { constructor(config = {}) { super('section', config)} render() { const $section = createElement('section', 'ui-section'); if (this.config.className) { $section.addClass(this.config.className)} if (this.config.background) { if (this.config.background.color) { $section.css('background-color', this.config.background.color)} if (this.config.background.image) { $section.css('background-image', `url(${this.config.background.image})`); $section.css('background-size', 'cover'); $section.css('background-position', 'center')} } const $container = createElement('div', 'section-container'); if (this.config.title) { const $title = createElement('h2', 'section-title', this.config.title); $container.append($title)} if (this.config.subtitle) { const $subtitle = createElement('p', 'section-subtitle', this.config.subtitle); $container.append($subtitle)} if (this.config.content) { const $content = createElement('div', 'section-content'); if (typeof this.config.content === 'string') { $content.html(this.config.content)} else if (Array.isArray(this.config.content)) { this.config.content.forEach(item => { if (item.type && item.config) { const component = this.createComponent(item.type, item.config); if (component) { $content.append(component.render())} } })} $container.append($content)} $section.append($container); return $section} createComponent(type, config) { switch (type) { case 'card': return new CardComponent(config); case 'button': return new ButtonComponent(config); case 'input': return new InputComponent(config); case 'checkbox': return new CheckboxComponent(config); case 'select': return new SelectComponent(config); default: console.warn('Unknown component type:', type); return null} } } class CardComponent extends BaseComponent { constructor(config = {}) { super('card', config)} render() { const $card = createElement('div', 'ui-card'); if (this.config.image) { const $image = createElement('div', 'card-image'); const $img = createElement('img'); $img.attr('src', this.config.image.src || this.config.image); $img.attr('alt', this.config.image.alt || 'Card image'); $image.append($img); $card.append($image)} const $content = createElement('div', 'card-content'); if (this.config.title) { const $title = createElement('h3', 'card-title', this.config.title); $content.append($title)} if (this.config.description) { const $description = createElement('p', 'card-description', this.config.description); $content.append($description)} if (this.config.buttons && Array.isArray(this.config.buttons)) { const $buttonGroup = createElement('div', 'card-buttons'); this.config.buttons.forEach(btn => { const $button = createElement('a', `card-btn ${btn.variant || 'primary'}`); $button.attr('href', btn.href || '#'); $button.text(btn.text || 'Button'); if (btn.onClick) { $button.on('click', (e) => { e.preventDefault(); btn.onClick()})} $buttonGroup.append($button)}); $content.append($buttonGroup)} $card.append($content); return $card} } class ButtonComponent extends BaseComponent { constructor(config = {}) { super('button', config)} render() { const $btn = createElement('button', 'ui-button', this.config.text || 'Click Me'); $btn.attr('id', this.id); this.element = $btn; if (this.config.onClick) { this.addEventHandler($btn, 'click', this.config.onClick)} return $btn} onMounted() { } onBeforeDispose() { } } class InputComponent extends BaseComponent { constructor(config = {}) { super('input', config)} render() { const $container = createElement('div', 'ui-input'); const $label = createElement('label', '', this.config.label || 'Label'); const $input = $('<input type="text">') .attr('placeholder', this.config.placeholder || 'Enter text') .attr('id', this.id); $container.append($label).append('<br>').append($input); return $container} } class CheckboxComponent extends BaseComponent { constructor(config = {}) { super('checkbox', config)} render() { const $container = createElement('div', 'ui-checkbox'); const $label = createElement('label', '', this.config.label || 'Checkbox'); const $input = $('<input type="checkbox">') .attr('id', this.id) .prop('checked', this.config.checked || false); if (this.config.onChange) { $input.on('change', this.config.onChange)} $container.append($input).append(' ').append($label); return $container} } class SelectComponent extends BaseComponent { constructor(config = {}) { super('select', config)} render() { const $container = createElement('div', 'ui-select'); const $label = createElement('label', '', this.config.label || 'Select'); const $select = $('<select>').attr('id', this.id); if (this.config.options && Array.isArray(this.config.options)) { this.config.options.forEach(option => { const $option = $('<option>').text(option).val(option); $select.append($option)})} if (this.config.onChange) { $select.on('change', this.config.onChange)} $container.append($label).append('<br>').append($select); return $container} } class FormBuilder { constructor(containerId) { this.container = $(`#${containerId}`); this.components = []; this.init()} init() { this.createComponentPalette(); this.setupDragAndDrop()} createComponentPalette() { const palette = $('#component-palette'); if (palette.length === 0) return; const components = [ { type: 'input', label: 'Text Input', icon: '📝' }, { type: 'button', label: 'Button', icon: '🔘' }, { type: 'checkbox', label: 'Checkbox', icon: '☑️' }, { type: 'select', label: 'Select', icon: '📋' } ]; components.forEach(comp => { const $item = $(`<div class="component-item" data-type="${comp.type}"> <span class="component-icon">${comp.icon}</span> <span class="component-label">${comp.label}</span> </div>`); palette.append($item)})} setupDragAndDrop() { $('.component-item').draggable({ helper: 'clone', revert: 'invalid', cursor: 'move', start: function(event, ui) { } }); this.container.droppable({ accept: '.component-item', activeClass: 'drag-over', drop: (event, ui) => { event.preventDefault(); const componentType = ui.helper.attr('data-type') || ui.helper.data('type'); this.addComponentToCanvas(componentType)} })} addComponentToCanvas(componentType) { let ComponentClass; const config = { id: `comp-${Date.now()}` }; try { switch (componentType) { case 'input': ComponentClass = InputComponent; break; case 'button': ComponentClass = ButtonComponent; break; case 'checkbox': ComponentClass = CheckboxComponent; break; case 'select': config.options = ['Option 1', 'Option 2', 'Option 3']; ComponentClass = SelectComponent; break; default: return} this.container.find('p').remove(); const componentData = window.ComponentManager.renderComponent(ComponentClass, this.container, { config }); if (componentData) { componentData.element.addClass('form-component'); this.components.push(componentData)} } catch (error) { } } getFormData() { const data = {}; this.components.forEach(comp => { const $element = $(`#${comp.id}`); if ($element.is('input')) { data[comp.id] = $element.val()} else if ($element.is('select')) { data[comp.id] = $element.val()} else if ($element.is('input[type="checkbox"]')) { data[comp.id] = $element.is(':checked')} }); return data} clearForm() { this.components.forEach(comp => { if (comp.dispose) { comp.dispose()} }); this.container.empty(); this.components = []; this.container.append('<p style="text-align: center; color: #888; margin-top: 50px;">Drag components from the left panel to build your form</p>')} } const LayoutTemplates = { landing: { type: 'landing', navbar: { brand: { text: 'Your Brand', href: '#' }, items: [ { text: 'Home', href: '#', active: true }, { text: 'About', href: '#about' }, { text: 'Services', href: '#services' }, { text: 'Contact', href: '#contact' } ], mobile: true }, hero: { title: 'Welcome to Our Platform', subtitle: 'Build amazing things with our tools and services', buttons: [ { text: 'Get Started', href: '#', variant: 'primary' }, { text: 'Learn More', href: '#', variant: 'secondary' } ] }, sections: [ { title: 'Features', subtitle: 'What makes us special', className: 'light', content: [ { type: 'card', config: { title: 'Feature 1', description: 'Amazing feature description here', buttons: [{ text: 'Learn More', href: '#', variant: 'outline' }] } }, { type: 'card', config: { title: 'Feature 2', description: 'Another great feature', buttons: [{ text: 'Learn More', href: '#', variant: 'outline' }] } }, { type: 'card', config: { title: 'Feature 3', description: 'Third amazing feature', buttons: [{ text: 'Learn More', href: '#', variant: 'outline' }] } } ] } ], footer: { text: '© 2024 Your Company. All rights reserved.', links: [ { text: 'Privacy Policy', href: '#' }, { text: 'Terms of Service', href: '#' }, { text: 'Contact', href: '#' } ] } }, dashboard: { type: 'dashboard', sidebar: { title: 'Dashboard', items: [ { text: 'Overview', href: '#', active: true }, { text: 'Analytics', href: '#' }, { text: 'Users', href: '#' }, { text: 'Settings', href: '#' }, { text: 'Reports', href: '#' } ] }, topbar: { title: 'Dashboard Overview', actions: [ { text: 'Export', onClick: () => alert('Export clicked') }, { text: 'Settings', onClick: () => alert('Settings clicked') } ] }, content: [ { type: 'card', config: { title: 'Welcome to Dashboard', description: 'Manage your data and analytics from here', buttons: [ { text: 'View Reports', href: '#', variant: 'primary' } ] } } ] }, blog: { type: 'blog', header: { title: 'My Blog', subtitle: 'Thoughts and insights' }, content: [ { type: 'card', config: { title: 'Blog Post Title', description: 'This is a sample blog post content...', buttons: [ { text: 'Read More', href: '#', variant: 'outline' } ] } } ], sidebar: { title: 'Recent Posts', items: [ { text: 'Post 1', href: '#' }, { text: 'Post 2', href: '#' }, { text: 'Post 3', href: '#' } ] }, footer: { text: '© 2024 My Blog', links: [ { text: 'About', href: '#' }, { text: 'Contact', href: '#' } ] } }, portfolio: { type: 'portfolio', navbar: { brand: { text: 'Portfolio', href: '#' }, items: [ { text: 'Home', href: '#', active: true }, { text: 'About', href: '#about' }, { text: 'Work', href: '#work' }, { text: 'Contact', href: '#contact' } ] }, hero: { title: 'Creative Portfolio', subtitle: 'Showcasing amazing work and projects', buttons: [ { text: 'View Work', href: '#work', variant: 'primary' } ] }, portfolio: { title: 'Featured Work', items: [ { title: 'Project 1', description: 'Amazing project description', image: 'https: }, { title: 'Project 2', description: 'Another great project', image: 'https: }, { title: 'Project 3', description: 'Third awesome project', image: 'https: } ] }, footer: { text: '© 2024 Portfolio', links: [ { text: 'LinkedIn', href: '#' }, { text: 'GitHub', href: '#' }, { text: 'Email', href: '#' } ] } }, minimal: { type: 'minimal', header: { title: 'Simple & Clean', subtitle: 'Minimal design for maximum impact' }, content: [ { type: 'card', config: { title: 'Welcome', description: 'This is a minimal layout example', buttons: [ { text: 'Get Started', href: '#', variant: 'primary' } ] } } ] }, sidebar: { type: 'sidebar', sidebar: { title: 'Navigation', items: [ { text: 'Home', href: '#', active: true }, { text: 'About', href: '#' }, { text: 'Services', href: '#' }, { text: 'Portfolio', href: '#' }, { text: 'Contact', href: '#' } ] }, content: [ { type: 'card', config: { title: 'Main Content', description: 'This is the main content area with sidebar navigation', buttons: [ { text: 'Learn More', href: '#', variant: 'outline' } ] } } ] }, grid: { type: 'grid', header: { title: 'Grid Layout', subtitle: 'Organized in a clean grid structure' }, grid: [ { type: 'card', config: { title: 'Grid Item 1', description: 'First grid item content', buttons: [{ text: 'Action', href: '#', variant: 'outline' }] } }, { type: 'card', config: { title: 'Grid Item 2', description: 'Second grid item content', buttons: [{ text: 'Action', href: '#', variant: 'outline' }] } }, { type: 'card', config: { title: 'Grid Item 3', description: 'Third grid item content', buttons: [{ text: 'Action', href: '#', variant: 'outline' }] } }, { type: 'card', config: { title: 'Grid Item 4', description: 'Fourth grid item content', buttons: [{ text: 'Action', href: '#', variant: 'outline' }] } } ], footer: { text: '© 2024 Grid Layout', links: [ { text: 'Home', href: '#' }, { text: 'About', href: '#' } ] } } }; function getLayoutTemplate(templateName) { return LayoutTemplates[templateName] || LayoutTemplates.landing} function getAvailableTemplates() { return Object.keys(LayoutTemplates)} function createCustomLayout(config) { return { type: config.type || 'default', ...config }}