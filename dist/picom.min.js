export{};export{};export class BaseComponent{constructor(type,config={}){this.element=null;this.isDisposed=false;this.eventHandlers=[];this.type=type;this.config=config;this.id=config.id||`comp-${Math.random().toString(36).substr(2,9)}`;this.loadCSS()}loadCSS(){if(window.PicomCSSLoader){window.PicomCSSLoader.loadComponentCSS(this.type)}}dispose(){if(this.isDisposed){return}this.onBeforeDispose?.();this.eventHandlers.forEach(handler=>{if(handler.element&&handler.event&&handler.fn){handler.element.removeEventListener(handler.event,handler.fn)}});this.eventHandlers=[];if(this.element&&this.element.parentNode){this.element.parentNode.removeChild(this.element)}this.element=null;this.isDisposed=true;this.onDisposed?.()}addEventHandler(element,event,handler){element.addEventListener(event,handler);this.eventHandlers.push({element:element,event:event,fn:handler})}getElement(){return this.element}updateConfig(newConfig){this.config={...this.config,...newConfig};if(this.element){const event=new CustomEvent("component:configUpdated",{detail:newConfig});this.element.dispatchEvent(event)}}}export class ComponentManager{constructor(){this.activeComponents=new Map;this.componentCounter=0}renderComponent(component,container,options={}){if(!component||!container){console.warn("ComponentManager: Invalid component or container");return null}const componentId=`comp-${++this.componentCounter}`;let componentInstance;try{componentInstance=new component(options.config||{})}catch(error){console.warn("ComponentManager: Error creating component instance:",error);return null}const rendered=componentInstance.render();if(!rendered){console.warn("ComponentManager: Component render returned empty result");return null}rendered.setAttribute("data-component-id",componentId);rendered.setAttribute("data-component-type",componentInstance.constructor.name);this.activeComponents.set(componentId,{id:componentId,element:rendered,instance:componentInstance,dispose:()=>this.disposeComponent(componentId)});container.appendChild(rendered);this.triggerComponentEvent(componentId,"mounted",{component:componentInstance,element:rendered});return{id:componentId,element:rendered,instance:componentInstance,dispose:()=>this.disposeComponent(componentId)}}disposeComponent(componentId){const componentData=this.activeComponents.get(componentId);if(!componentData){console.warn(`ComponentManager: Component ${componentId} not found`);return false}const{instance,element}=componentData;this.triggerComponentEvent(componentId,"beforeDispose",{component:instance,element:element});if(instance.dispose&&typeof instance.dispose==="function"){try{instance.dispose()}catch(error){console.error(`ComponentManager: Error disposing component ${componentId}:`,error)}}if(element.parentNode){element.parentNode.removeChild(element)}this.activeComponents.delete(componentId);this.triggerComponentEvent(componentId,"disposed",{component:instance});return true}disposeComponentsInContainer(container){const componentsInContainer=container.querySelectorAll("[data-component-id]");let disposedCount=0;componentsInContainer.forEach(element=>{const componentId=element.getAttribute("data-component-id");if(componentId&&this.disposeComponent(componentId)){disposedCount++}});return disposedCount}disposeAllComponents(){const componentIds=Array.from(this.activeComponents.keys());let disposedCount=0;componentIds.forEach(id=>{if(this.disposeComponent(id)){disposedCount++}});return disposedCount}getComponent(componentId){return this.activeComponents.get(componentId)}getComponentsByType(type){const components=[];this.activeComponents.forEach((data,id)=>{if(data.instance.type===type){components.push({...data,id:id})}});return components}getStats(){const stats={total:this.activeComponents.size,byType:{},memoryUsage:0};this.activeComponents.forEach((data,_id)=>{const type=data.instance.type;stats.byType[type]=(stats.byType[type]||0)+1;stats.memoryUsage+=this.estimateComponentMemory(data)});return stats}estimateComponentMemory(componentData){const element=componentData.element;const nodeCount=element.querySelectorAll("*").length+1;return nodeCount*100}triggerComponentEvent(componentId,eventName,data){const event=new CustomEvent(`component:${eventName}`,{detail:{componentId:componentId,...data}});document.dispatchEvent(event)}cleanupOldComponents(_maxAge=3e5){const oldComponents=[];this.activeComponents.forEach((_data,_id)=>{});oldComponents.forEach(id=>this.disposeComponent(id));return oldComponents.length}}window.ComponentManager=new ComponentManager;window.addEventListener("beforeunload",function(){window.ComponentManager.disposeAllComponents()});import{BaseComponent}from"../../core/BaseComponent";export class InputComponent extends BaseComponent{constructor(config={}){super("input",config);this.inputConfig=config}render(){const container=document.createElement("div");container.className="picom-textbox";const label=document.createElement("label");label.textContent=this.inputConfig.label||"Label";label.className="picom-textbox-label";const input=document.createElement("input");input.type=this.inputConfig.type||"text";input.placeholder=this.inputConfig.placeholder||"Enter text...";input.id=this.inputConfig.id||this.id;input.className="picom-textbox-input";input.value=this.inputConfig.value||"";if(this.inputConfig.required)input.required=true;if(this.inputConfig.maxLength)input.maxLength=this.inputConfig.maxLength;if(this.inputConfig.minLength)input.minLength=this.inputConfig.minLength;if(this.inputConfig.pattern)input.pattern=this.inputConfig.pattern;if(this.inputConfig.disabled)input.disabled=true;if(this.inputConfig.onChange){this.addEventHandler(input,"change",this.inputConfig.onChange)}if(this.inputConfig.onFocus){this.addEventHandler(input,"focus",this.inputConfig.onFocus)}if(this.inputConfig.onBlur){this.addEventHandler(input,"blur",this.inputConfig.onBlur)}container.appendChild(label);container.appendChild(document.createElement("br"));container.appendChild(input);this.element=container;return container}getValue(){const input=this.element?.querySelector("input");return input?.value||""}setValue(value){const input=this.element?.querySelector("input");if(input){input.value=value}}focus(){const input=this.element?.querySelector("input");input?.focus()}blur(){const input=this.element?.querySelector("input");input?.blur()}isValid(){const input=this.element?.querySelector("input");return input?.checkValidity()??true}}import{BaseComponent}from"../../core/BaseComponent";export class ButtonComponent extends BaseComponent{constructor(config){super("button",config);this.buttonConfig=config}render(){const button=document.createElement("button");button.textContent=this.buttonConfig.text;button.id=this.buttonConfig.id||this.id;button.className=this.getButtonClasses();button.type=this.buttonConfig.type||"button";if(this.buttonConfig.disabled)button.disabled=true;if(this.buttonConfig.onClick){this.addEventHandler(button,"click",this.buttonConfig.onClick)}if(this.buttonConfig.onFocus){this.addEventHandler(button,"focus",this.buttonConfig.onFocus)}if(this.buttonConfig.onBlur){this.addEventHandler(button,"blur",this.buttonConfig.onBlur)}this.element=button;return button}getButtonClasses(){const classes=["picom-button"];if(this.buttonConfig.variant){classes.push(`picom-button-${this.buttonConfig.variant}`)}if(this.buttonConfig.size){classes.push(`picom-button-${this.buttonConfig.size}`)}if(this.buttonConfig.className){classes.push(this.buttonConfig.className)}return classes.join(" ")}setText(text){if(this.element){this.element.textContent=text}}getText(){return this.element?.textContent||""}enable(){if(this.element){this.element.disabled=false}}disable(){if(this.element){this.element.disabled=true}}focus(){this.element?.focus()}click(){this.element?.click()}}export{BaseComponent}from"./core/BaseComponent";export{ComponentManager}from"./core/ComponentManager";export{InputComponent}from"./components/input/InputComponent";export{ButtonComponent}from"./components/button/ButtonComponent";export*from"./types";export*from"./types/components";import{ComponentManager}from"./core/ComponentManager";import{InputComponent}from"./components/input/InputComponent";import{ButtonComponent}from"./components/button/ButtonComponent";import{BaseComponent}from"./core/BaseComponent";if(typeof window!=="undefined"){window.InputComponent=InputComponent;window.ButtonComponent=ButtonComponent;window.BaseComponent=BaseComponent}